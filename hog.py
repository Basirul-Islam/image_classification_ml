# -*- coding: utf-8 -*-
"""HoG.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1urnESfu8RWASh800eNFkyo3REttEgYnx
"""

'''from google.colab import drive
drive.mount('/content/drive')'''

#importing required libraries
from skimage.io import imread
from skimage.transform import resize
from skimage.feature import hog
from skimage import exposure
import matplotlib.pyplot as plt

# reading the image
def hog_func(resized_image):
  
  fd, hog_image = hog(resized_image, orientations=9, pixels_per_cell=(8, 8),
                	cells_per_block=(2, 2), visualize=True)
  return fd #features

import pandas as pd
import os
from skimage.transform import resize
from skimage.io import imread
from skimage.filters import gaussian
import numpy as np
import matplotlib.pyplot as plt
from skimage.color import rgb2gray

Categories = ['Boot', 'Shoe', 'Sandal']


#path which contains all the categories of images
def feature_extraction(datadir):
  data=[] #input array
  labels=[] #output array
  # datadir='/content/drive/MyDrive/animal/train'
  for category in Categories:    
      print(f'loading... category : {category}')
      count = 0
      path=os.path.join(datadir,category)
      for img in os.listdir(path):
          count = count + 1
          if (count > 10):
              break
          img_array = imread(os.path.join(path,img), as_gray=True)
          img_array = gaussian(img_array, sigma=.4)
          img_resized = resize(img_array,(300, 400))
          img_hog = hog_func(img_resized)
          # print(img_hog.shape)
          data.append(img_hog)
          labels.append(Categories.index(category))
      print(f'loaded category: {category} successfully')
  return data, labels


def get_hog_prediction():

    # flat_data=np.array(flat_data_arr)
    # target=np.array(target_arr)

    # df=pd.DataFrame(flat_data) #dataframe
    # df['Target']=target

    # x=df.iloc[:,:-1] #input data
    # y=df.iloc[:,-1] #output data

    data, labels = feature_extraction('DataSet/')

    from sklearn import svm
    from sklearn.model_selection import GridSearchCV

    param_grid = {'C':[0.1,1,10,100],'gamma':[0.0001,0.001,0.1,1],'kernel':['rbf','poly']}
    svc = svm.SVC(probability=True)
    model = GridSearchCV(svc,param_grid)

    from sklearn.model_selection import train_test_split
    # from sklearn.decomposition import PCA

    x_train, x_test, y_train, y_test = train_test_split(data, labels, test_size=0.20, random_state=77, shuffle=True, stratify=labels)
    print('Splitted Successfully')

    model.fit(x_train, y_train)
    print('The Model is trained well with the given images')

    from sklearn.metrics import classification_report, accuracy_score
    from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

    y_pred = model.predict(x_test)

    cm = confusion_matrix(y_test, y_pred)
    print(cm)
    #disp = ConfusionMatrixDisplay(confusion_matrix = cm, display_labels = Categories)
    #disp.plot()

    y_pred = model.predict(x_test)
    print("The predicted Data is :")
    print(y_pred)
    print("The actual data is:")
    print(np.array(y_test))
    print(f"The model is {accuracy_score(y_pred, y_test)*100}% accurate")

    # from skimage.color.colorconv import xyz2lab
    # from skimage.color import rgba2rgb
    # url=input('Enter URL of Image :')
    # img = imread('/content/drive/MyDrive/animal/test/deer/36e6c35541.jpg', as_gray=True)

    # # plt.show()
    # img_array = gaussian(img, sigma=.4)

    # img_resized=resize(img_array,(300, 400))
    # plt.imshow(img_resized)
    # img_hog = hog_func(img_resized).reshape(1, -1)
    # # print(img_hog.shape)
    # # xy = [img_hog]
    # # img_hog = img_hog.reshape(1, -1)
    # # img_resize=resize(img,(150,150,3))
    # # l=[img_hog.flatten()]
    # # l_pca = pca.transform(l)
    # ans = model.predict(img_hog)

    # print(Categories[ans[0]])
    # probability=model.predict_proba(img_hog)
    # for ind, val in enumerate(Categories):
    #     print(f'{val} = {probability[0][ind]*100}%')

    # print("The predicted image is : "+ Categories[model.predict(img_hog)[0]])

    test_data, test_labels = feature_extraction('TestData')

    y_pred = model.predict(test_data)

    cm = confusion_matrix(test_labels, y_pred)
    print(cm)
    #disp = ConfusionMatrixDisplay(confusion_matrix = cm, display_labels = Categories)
    #disp.plot()
    print("The predicted Data is :")
    print(y_pred)
    print("The actual data is:")
    print(np.array(test_labels))
    print(f"The model is {accuracy_score(y_pred, test_labels)*100}% accurate")